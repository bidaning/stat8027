?runif
?repeat
{}
?repeat
{}
return(s)
EXP1 <- exp(1)
rou.gamma(n,shape,log=FALSE){
EXP1 <- exp(1)
rou.gamma <- function(n,shape,log=FALSE){
if(shape<=0 | shape>=1) stop("shape is not in (0,1)")
if(shape<=0.01 & !log) warning("It is recommended to set log=TRUE for shape<0.01")
y.max=(shape/EXP1)^(shape/2)
z.min=-2/EXP1
z.max=2*shape/EXP1/(EXP1-shape)
s=numeric(n)
for(i in 1:n){
repeat{
y=runif(1,0,y.max)
t=runif(1,z.min,z.max)/y
x=exp(t/shape)
if(2*log(y)<= t-x){
s[i]=if(log) t/shape else x
break
}
}
}
return(s)
}
rou.gamma(20, 0.5)
rou.gamma(100, 0.5)
m<-rou.gamma(100, 0.5)
hist(m)
w<-rgamma(100,0.5,1)
par(mfrow=c(1,2))
hist(m)
hist(w)
w<-rgamma(1000,0.5,1)
m<-rou.gamma(1000, 0.5)
hist(m)
hist(w)
library(datasets)
data("iris")
?iris
view(iris)
View(iris)
?tapply
tapply(iris, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean, na.rm = TRUE)
apply(iris[,1:4], 2, mean)
library(datasets)
data(mtcars)
View(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
?sapply
split(mtcars, mtcars$cyl)
sapply(split(mtcars, mtcars$cyl),mean)
split(mtcars$mpg, mtcars$cyl
)
sapply(split(mtcars$mpg, mtcars$cyl),mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))[3]-with(mtcars, tapply(hp, cyl, mean))[1]
debug(ls)
ls(y~x)
lapply()
tapply(iris$Sepal.Length, iris$Species, mean, na.rm = TRUE)
apply(iris[,1:4], 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl),mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))[3]-with(mtcars, tapply(hp, cyl, mean))[1]
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
?numeric
?numeric
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
TRUE == TRUE
FALSE == TRUE
(FALSE == TRUE) == FALSE
6 00 7
6 == 7
6 < 7
10 <= 10
5 != 7
! 5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints<- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
ints
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd ,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(aaa)
telegram("aaa")
submit()
mad_libs(place = "Melbourn", adjective = "Mad", noun = "ball")
submit()
I %p% love %p% R
"I" %p% "love" %p% "R"
info()
"I" %p% "love" %p% "R!"
quit()
156/492
225/561
setwd("D:\\ANU\\2016S1\\STAT8027\\")
gdp <- read.table("GDP.txt", header = T)
setwd("D:\\ANU\\2016S1\\STAT8027\\stat8027")
gdp <- read.table("GDP.txt", header = T)
View(gdp)
setwd("D:\\ANU\\2016S1\\STAT8027\\stat8027")
gdp <- read.table("gdp2013.csv", header = T)
setwd("D:\\ANU\\2016S1\\STAT8027\\stat8027")
gdp <- read.table("gdp2013.csv")
labor <- read.table("labor2013.csv")
gdp <- read.table("gdp2013.csv",header = F)
gdp <- read.csv("gdp2013.csv")
labor <- read.csv("labor2013.csv")
View(gdp)
setwd("D:\\ANU\\2016S1\\STAT8027\\stat8027")
gdp <- read.table("gdp2013.csv", header = T)
labor <- read.table("labor2013.csv", header = T)
par(mfrow=c(1,2))
plot(gdp$Y2013)
plot(labor$Y2013)
View(gdp)
View(gdp)
View(labor)
y<-na.omit(gdp[,3])
x<-na.omit(labor[,3])
plot(gdp$Country.Code,gdp$Y2013,na.rm = T)
plot(labor$Y2013,gdp$Y2013,na.rm = T)
?log()
y<-as.matrix(na.omit(log(gdp[,3]))
x<-as.matirx(na.omit(log(labor[,3]))
y<-as.matrix(na.omit(log(gdp[,3]))
)
y<-as.matrix(na.omit(log(gdp[,3])))
x<-as.matirx(na.omit(log(labor[,3])))
plot(x,y)
plot(x)
View(labor)
View(gdp)
x<-as.matrix(na.omit(log(labor[,3])))
plot(x)
plot(x,y)
plot(x,y)
?solve()
beta <- solve(t(x)%*%x)%*%t(x)%*%y
beta
i <- as.matrix(rep(1,length(g)))
g<-as.matrix(na.omit(log(labor[,3])))
i <- as.matrix(rep(1,length(g)))
x <- cbind(i,g)
is.matrix(x)
beta <- solve(t(x)%*%x)%*%t(x)%*%y
beta
beta
lr <- lm(y~x)
summary(lr)
lr <- lm(y~g)
summary(lr)
beta
plot(lr)
plot(lr)
